
//Global variables
double couchPos[2] = {0,0};
//double robotPos[2] = {0,0}; May or may not need depending on how we make the coordinate system work

int main()
{
	calibrateAllSensors();
	
	while(true)
	{	//The robot gets placed at the drink stand. Make sure it can see the first drink option in the line.
		
		waitForTouch();
		//Set motor encoders to position (0,0) in a coordinate system we'll figure out. If we can't get the robot's wheels to be perpendicular with minimal drag, I have an idea that would work as an alternative method of having the coordinate system by storing the encoder values in variables.
		findCouch(); //(We might be able to change this to make it not have to be in a straight line, but that can come back to this later)
		waitForTouch();
		
		std::string drinkSelection[6] = {"Nothing", "Nothing", "Nothing", "Nothing", "Nothing", "Nothing"}
		menuSelect(drinkSelection);
		
		//Turn around (Didn't program because it'll be done differently depending on how we do the coordinate system)
		//returnHome(); (Will include object-detection code. Didn't program yet because it'll be done differently depending on how we do the coordinate system)
		for (int i = 0; i < 6; i++) (6?)
		{
			getDrink(drinkSelection[i]); //The robot will go get the drink, pick it up, and put it in a basket (Can be changed to have the for loop include the returnHome() and returnCouch() so that it doesn't need a basket)
		}
		//returnCouch();
		Brain.playSound(tada);
	}
}

void waitForTouch()
{
	while (!touchLED_.pressing()) //rename touchLED_
	{}
	while (touchLED_.presssing()) //rename touchLED_
	{}
}

void findCouch()
{
	const int TURN_AROUND = 180;
	const int NEAR_COUCH = 80;
	
	BrainInertial.setRotation(0,degrees);
	motorLeft.spin(forward, 50, percent);
	motorRght.spin(backward, 50, percent);
	while (BrainIntertial.rotation() < TURN_AROUND)
	{}
	motorLeft.stop(brake);
	motorRight.stop(brake);
	motorLeft.setPosition(0, mm);
	//motorRight.setPosition(0, mm); May or may not be necessary depending on how we do the wheels
	
	motorLeft.spin(forward, 100, percent); //Might have to slow down if it's not precise enough
	motorRght.spin(forward, 100, percent);
	while (distanceSensor.objectDistance(mm) > NEAR_COUCH) //Change the name of the distanceSensor to what it's named in the code
	{}
	motorLeft.stop(brake);
	motorRight.stop(brake);
	couchPos[0] = 0;
	couchPos[1] = motorLeft.position(mm);	//This is so that you're looking at it from a top down view and the drink station is vertically placed from the couch. The x coordinate should be 0 since it's just moving in a straight line.
	
	Brain.Screen.setCursor(1,1);
	Brain.playSound(tada);
	Brain.Screen.print("Hello!\nI am here to serve you.\nPress the touchLED when you want a drink!");
}

void menuSelect(std::string order[6])
{
	bool doneOrdering = false;
	for (int i = 0; i < 6 && !doneOrdering; i++)
	{
		Brain.Screen.clearScreen();
		Brain.Screen.setCursor(1,1);
		Brain.Screen.print("What drink would you like?\n  Fanta\n  Coca Cola\n  Pepsi\n  Sprite\n  DONE");
		Brain.Screen.setCursor(1,1);
		Brain.Screen.print(">");
		while (!Brain.buttonLeft.pressing() && !Brain.buttonRight.pressing())
		{}
		if(Brain.buttonLeft.pressing())
		{
			if (Brain.Screen.row() > 1)
			{
   			  Brain.Screen.setCursor(Brain.Screen.row(), 1);
    		  Brain.Screen.print(" ");      //Should overwrite the > selection arrrow
    		  Brain.Screen.setCursor(Brain.Screen.row() - 1, 1);
    		  Brain.Screen.print(">");
    		}
  		}
  		if (Brain.buttonRight.pressing())
  		{
    		if (Brain.Screen.row() < 5) //Does this count as a magic number??
    		{
    		  Brain.Screen.setCursor(Brain.Screen.row(), 1);
    		  Brain.Screen.print(" ");      //Should clear the > selection arrrow
    		  Brain.Screen.setCursor(Brain.Screen.row() + 1, 1);
    		  Brain.Screen.print(">");
    		}
  		}
  		if (Brain.buttonCheck.pressing())	//We might want to make this a separate function and have it return a string which we can put into the array, because we do need at least one function that returns something. It'll also give us one more function out of six that we need to write.
  		{
  			switch (Brain.Screen.row())
  			{
  		    	case 1:
  		    		order[i] = "Fanta";
  				case 2:
  		    		order[i] = "Coca Cola";
  		    	case 3:
  		    		order[i] = "Pepsi";
  		    	case 4:
  		    		order[i] = "Sprite";
  		    	case 5:
  		    		doneOrdering = true;
  			}
  		}
	}

} //(We could also add an "Other" option that lets you choose a colour in case we put other cans)

void returnHome()
{
	
}

void getDrink(std::string drink)	//The robot will go get the drink, pick it up, and put it in a basket
{
	//The distance sensor and the optical sensor have to be like right on top of the other
}

